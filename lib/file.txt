List<IntroScreen> pages =  [
        IntroScreen(
          title: 'Search',
          imageAsset: 'assets/img/1.png',
          description: 'Quickly find all your messages',
          headerBgColor: Colors.white,
        ),
        IntroScreen(
          title: 'Focused Inbox',
          headerBgColor: Colors.white,
          imageAsset: 'assets/img/2.png',
          description: "We've put your most important, actionable emails here",
        ),
        IntroScreen(
          title: 'Social',
          headerBgColor: Colors.white,
          imageAsset: 'assets/img/3.png',
          description: "Keep talking with your mates",
        ),
      ];









    return Scaffold(
      body: introScreens,
    );

final now = DateTime.now();
final today = DateTime(now.year, now.month, now.day);
final yesterday = DateTime(now.year, now.month, now.day - 1);
final tomorrow = DateTime(now.year, now.month, now.day + 1);


final dateToCheck = ...
final aDate = DateTime(dateToCheck.year, dateToCheck.month, dateToCheck.day);
if(aDate == today) {
  ...
} else if(aDate == yesterday) {
  ...
} else(aDate == tomorrow) {
  
}







String timeWidgetText(int t) {
 var format = new DateFormat('d MMM, hh:mm a');
    var date = new DateTime.fromMillisecondsSinceEpoch(t );
var formattedDate = DateFormat.yMMMd().format(date); // Apr 8, 2020


    var now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
   var formattedToday =  DateFormat.yMMMd().format(today);


    final yesterday = DateTime(now.year, now.month, now.day - 1);
   var formattedYesterDay =  DateFormat.yMMMd().format(yesterday);

  String time ='';

if(formattedDate == formattedToday) {
  time ="اليوم" ;
} else if(formattedDate == formattedYesterDay) {
  time ="الأمس";

}else{



  time = formattedDate;
}
    
    return time;
  }







Widget _imageViewWidget(String fileUrl) {
  return Material(
    child: BackdropFilter(
      filter: ui.ImageFilter.blur(
        sigmaX: 1.5,
        sigmaY: 1.5,
      ),
      child: GestureDetector(
        onTap: () => Navigator.pop(context),
        child: SafeArea(
          child: Container(
            color: Colors.transparent,
            padding: EdgeInsets.fromLTRB(
              30.0,
              50.0,
              30.0,
              50.0,
            ),
            child: Column(
              children: <Widget>[
                Flexible(
                  child: PhotoView(
                    backgroundDecoration: BoxDecoration(
                      color: Colors.transparent,
                    ),
                      imageProvider:CachedNetworkImageProvider(fileUrl),
                    loadingBuilder:
                        (BuildContext context, ImageChunkEvent event) =>
                            showLoader(),
                  ),
                ),
                Center(
                  child: IconButton(
                    icon: CircleAvatar(
                      backgroundColor: Colors.orange,
                      child: Icon(
                        Icons.close,
                        color: Colors.white,
                      ),
                    ),
                    onPressed: () => Navigator.pop(context),
                  ),
                )
              ],
            ),
          ),
        ),
      ),
    ),
  );
}







//get file type
 String fileURL = '${file.fileUrl}';
  String fileType = fileURL.split('.').last.toLowerCase();





  _launchURL(String url) async {
  const url = url; // you can use your url
  if (await canLaunch(url)) {
    await launch(url);
  } else {
    throw 'Unable to open url : $url';
  }
}